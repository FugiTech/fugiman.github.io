<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fugiman]]></title>
  <link href="http://fugiman.github.io/atom.xml" rel="self"/>
  <link href="http://fugiman.github.io/"/>
  <updated>2013-09-21T21:04:14+00:00</updated>
  <id>http://fugiman.github.io/</id>
  <author>
    <name><![CDATA[Chris "Fugiman" Gamble]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Twisted-Python developer's experience with Node.JS]]></title>
    <link href="http://fugiman.github.io/blog/2013/09/21/a-twisted-python-developer-s-experience-with-node-js/"/>
    <updated>2013-09-21T16:57:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/09/21/a-twisted-python-developer-s-experience-with-node-js</id>
    <content type="html"><![CDATA[<h2>The Story</h2>

<p>Last weekend I was flown out to San Francisco to compete in the <a href="http://events.signalfire.com/">University Hacker Olympics hosted by SignalFire</a>. Around 100 university students split in to teams of 2-5 students and worked with engineers from various companies on projects of their choosing. After 26 hours we presented our products to a panel of judges who would select the winning team. While there was a prize, I was just there to have a good time and meet some awesome people. Needless to say, I had a great time.</p>

<h2>My Team</h2>

<p>I got to work with some splendid folk from the <a href="http://samsungaccelerator.com/">Samsung Accelerator</a>. Our project idea was a website and android app to track ping pong matches between office employees and a leaderboard for each office. As <a href="http://samsungaccelerator.com/jason_yau/">Jason</a> had given a talk on Node.JS earlier, we decided to build the backend with Node as a learning exercise. It&rsquo;d be a simple REST api for the app, with data storage handled by MongoDB, and live updating of the website through Socket.IO. All very simple and straight-forward.</p>

<h2>The Good</h2>

<p>Node has an amazing community, and an easy to use package manager. We quickly got started using <a href="https://npmjs.org/package/express">Express</a> to make our REST api easy to build and our static content even easier. <a href="https://npmjs.org/package/mongoose">Mongoose</a> made our database persistance equally easy, and <a href="https://npmjs.org/package/socket.io">Socket.IO</a> was&hellip; well actually not great. Regardless, if we needed something done there was a package to help us get there.</p>

<h2>The Bad</h2>

<p>Node, like Twisted, is an event based asyncronous framework. To achieve this it uses callbacks like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doSomething</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Handle the error</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Handle the result</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works fine when one level deep, but what if your callback has to call another asyncronous function with a callback? What if <em>that</em> also has a callback? Your code starts flowing to the right faster than it flows down, and you enter callback hell.</p>

<p>To prevent this, there are a number of libraries that tranform the callback syntax into a chainable sequence. Jason, our Node guru, recommended <a href="https://npmjs.org/package/q">Q</a>. Q introduces promises which, like Twisted&rsquo;s deferreds, allow easily chaining callbacks and error handlers. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">doSomethingAndReturnAPromise</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do something with the result and return another promise</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do something with the result of the last callback</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Uh-oh, one of our three functions broke!</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>While they aren&rsquo;t exactly like deferreds, they serve a similar purpose and work rather well. Problem solved, right?</p>

<h2>The Ugly</h2>

<p>Not quite. While Q provides promises, no library returns them natively. Which means that every one of those lovely libraries provided by the caring community has to be wrapped in promises manually if you want to avoid callback hell. This negates a substantial portion of the benefit gained by having the libraries in the first place.</p>

<h2>Conclusion</h2>

<p>I&rsquo;m really glad I actually tried Node. I&rsquo;d been fairly set in my ways as a user of Twisted, and saw no need to switch. Now that I&rsquo;ve tried it, I realize that many of my arguments were just plain wrong. For instance, developing in javascript isn&rsquo;t as terrible as I thought it would be since the most frustrating bits are actually messing with the DOM, and there are good libraries to make it easier to write good javascript. While maturity of the event loop is also a concern, it&rsquo;s rather abstract and not something I&rsquo;m qualified to argue.</p>

<p>What I can say for certain is that the lack of deferreds as a core component of node has led to a critical flow control problem. For now, I&rsquo;ll be sticking with Twisted and it&rsquo;s beautiful inlineCallbacks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Resume PDF Generation]]></title>
    <link href="http://fugiman.github.io/blog/2013/09/12/automatic-resume-pdf-generation/"/>
    <updated>2013-09-12T19:55:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/09/12/automatic-resume-pdf-generation</id>
    <content type="html"><![CDATA[<p>Earlier I posted about using Prose.IO and Travis-CI to allow posting on my blog from anywhere with little hassle. However, I also host my resume on this site and wanted to be able to easily update it as well. While I could edit it like any other post from Prose, I also wanted a PDF copy for companies seeking a downloadable version and for uploading to other sites.</p>

<p>The question became &ldquo;How do I automatically convert my markdown resume into a PDF?&rdquo; A few google searches later and I stumbled on <a href="https://github.com/alanshaw/markdown-pdf">Alan Shaw&rsquo;s Markdown-PDF package</a>. This package converts markdown to HTML, renders it with PhantomJS, then exports the rendered site to a PDF. Simple, a bit crude, but it works. To aide in making the documents look good, the package includes the base CSS of Twitter Bootstrap.</p>

<p>To make the generated resume look professional, I utilized some of the options Markdown-PDF provides. The first was using the &ldquo;Preprocess Markdown&rdquo; option to remove the YAML header and PDF download link from the file. Markdown-PDF doesn&rsquo;t understand the YAML header that Jekyll requires so I had to manually remove it, and there was no point to having a PDF download link in the PDF itself. Next, I processed the generated HTML to turn all links into plaintext. I found that they just made no sense if you couldn&rsquo;t click them, and they styling was distracting. Finally, I used the web font &ldquo;Oxygen&rdquo; to add some style.</p>

<p>Finally, getting Travis-CI to generate the PDF is rather simple. Every Travis-CI VM includes Node.JS by default, so I just had to add <code>npm install markdown-pdf</code> and <code>node generate_resume.js</code> to the before script instructions. My resume is generated and put in the proper place, and then Octopress deploys it as normal. Simple!</p>

<p><a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/generate_resume.js">generate_resume.js</a><br/>
<a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/pdf.css">pdf.css</a><br/>
<a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/.travis.yml">.travis.yml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Prose.IO to post from the cloud]]></title>
    <link href="http://fugiman.github.io/blog/2013/09/10/using-prose-io-to-post-from-the-cloud/"/>
    <updated>2013-09-10T12:35:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/09/10/using-prose-io-to-post-from-the-cloud</id>
    <content type="html"><![CDATA[<p>When I first chose Octopress, I was delighted that I could quickly and easily create posts in markdown. I wanted to ensure that it would be as easy as possible to create content, so that I&rsquo;d have no reason not to post whatever I felt like. However, the biggest issue I had was that it required running jekyll locally to do so.</p>

<p>Today I decided to fix this stumbling block, and began to look for a frontend for Octopress. What I found instead was <a href="http://prose.io/">Prose.IO</a>. Prose isn&rsquo;t a frontend for Octopress, it is a way to edit any file in any of your github repositories easily. It just so happens that this is all it takes to allow me to create posts straight from my browser without any fussing with jekyll or git. I create a post on Prose.IO, which then commits to github, which is then processed by <a href="https://travis-ci.org/">Travis.CI</a>, which then commits back to github, which deploys the site. It all just works.</p>

<p>If this sounds like something you&rsquo;d want for yourself, you can checkout <a href="http://rogerz.github.io/blog/2013/02/21/prose-io-github-travis-ci/">this handy guide by Rogerz Zhang</a>. It got me squared away in about 20 minutes. Just note that the format of the Prose.IO configuration in <code>_config.yml</code> has changed. My settings look like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#prose.io settings 
</span><span class='line'>prose: 
</span><span class='line'>  rooturl: "source" 
</span><span class='line'>  metadata: 
</span><span class='line'>    source/_posts:
</span><span class='line'>      - name: "layout"
</span><span class='line'>        field:
</span><span class='line'>          element: "hidden"
</span><span class='line'>          value: "post"
</span><span class='line'>      - name: "title"
</span><span class='line'>        field:
</span><span class='line'>          element: "text"
</span><span class='line'>          label: "Title"
</span><span class='line'>          value: "Post"
</span><span class='line'>      - name: "categories"
</span><span class='line'>        field:
</span><span class='line'>          element: "text"
</span><span class='line'>          label: "Categories"
</span><span class='line'>          value: ""</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On click-fueled javascript games]]></title>
    <link href="http://fugiman.github.io/blog/2013/08/17/on-click-fueled-javascript-games/"/>
    <updated>2013-08-17T04:35:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/08/17/on-click-fueled-javascript-games</id>
    <content type="html"><![CDATA[<p><em>alternatively: ClickQuest and Cookie Clicker, A tale of two games that start with a single click</em></p>

<p>Before I start, I recommend you at least glance at the games for a minute or two.<br/>
<a href="http://www.clickquest.net/">http://www.clickquest.net/</a><br/>
<a href="http://orteil.dashnet.org/experiments/cookie/">http://orteil.dashnet.org/experiments/cookie/</a></p>

<p>I made ClickQuest almost exactly 3 years ago, far past the time required for me to regret every line of code I wrote.
However, I did learn quite a few things in its bug-riddled construction, and many things in the years of reflection afterwards.
ClickQuest was originally marketed as &ldquo;distilling an MMORPG into its most core mechanic &ndash; click and numbers go up&rdquo;.
Indeed, Cookie Clicker takes this a step further: Click to increase a number that you can decrease to increase faster.
It is the most instant of gratification, a split second is all it takes.</p>

<p>However, while this makes the games extremely good for single-player, it makes it incredibly hard for multiplayer.
If you play by yourself, there is no reason to cheat, as all you do is lower your own enjoyment.
When multiplayer (more specifically a leaderboard) is introduced, then players are motivated to cheat.
In MMORPGs the layers of abstraction provide a mechanism to defeat cheating.
But in clicking games, we&rsquo;ve peeled away those layers, and so our only action in the game is clicking.
This is the biggest strength and greatest weakness in clicking games.</p>

<p>When I made ClickQuest, it was designed with a leaderboard and chat in mind.
I knew that cheating would be a big concern, so I tried to proactively thwart it.
Here&rsquo;s what I tried in order of when I tried it.</p>

<h3>Approach 1: Send every click to the server</h3>

<p>This worked great in testing.
If I saw every click then nobody could fake it, right?
In reality, this just changed cheating from faking clicks to spamming my server with HTTP requests.
And when your game generates a request for every click, you&rsquo;ve just invented a way to DDOS your own server.
Oops.</p>

<h3>Approach 2: Rate limit clicks client-side</h3>

<p>I changed the client to only accept a click when 60ms had passed since the last click.
I found this was a reasonable upper bound for how fast a human can click a mouse, even with a mouse in each hand alternating clicks.
(Yes, I had some hardcore players.)
But this just slows down the cheater, assuming they don&rsquo;t go past it straight to the server.</p>

<h3>Approach 3: Obfusicate the request payload</h3>

<p>Aha, if players can bypass the client to cheat, I need to force them to use the client.
Simple! Make the packet sent from the client to the server super special secret so that they can&rsquo;t duplicate it!
And of course, obfusicate my javascript so they can&rsquo;t find out how I do it!
A great idea in theory, but it is <a href="http://jsbeautifier.org/">pretty trivial to unpack javascript</a>.
In reality, this did nothing.</p>

<h3>Approach 4: Track as many metrics as I can and figure out where they should be server-side</h3>

<p>Finally, a proper solution.
I kept track of how many clicks per second a user made whenever they made a request to the server.
I&rsquo;d then compare that to how many clicks per second they&rsquo;d made in the past 100 requests.
If your clicking was consistently close to the 60ms per click mark, I&rsquo;d give them a strike.
Likewise if they clicked faster than 60ms mark, or if they were clicking at the same rate constantly.
This actually led to catching bots, but unfortunately it had too many false positives and had to be turned off.</p>

<h3>Approach 5: Give up and let it happen</h3>

<p>By this point I&rsquo;d spent 6 months and had no idea what else I could do.
It is extremely difficult to regulate pure clicks.
If I were to attempt it today, I&rsquo;d use the efficiency of websockets to combine approach 1 and 4.
I&rsquo;d log the location and time of every click for every user, and use that to try and weed out (poorly designed) bots.
But even that would likely fail.
The developer simply lacks enough information to properly prevent cheating.</p>

<h3>But Cookie Clicker is different than ClickQuest!</h3>

<p>Orteil has added back a layer of abstraction in the form of buyable cookie producers.
Now, past a certain point, it&rsquo;s the buildings producing 99% of the cookies &ndash; clicking is irrelevant.
Using my numbers a player can legitimately acquire 20 cookies per second from clicking.
If you open a websocket connection for each player, you can track whether they have the page open or not.
Then, send a packet every 30 seconds, or on building purchase (whichever happens first).
Each packet would have the number of cookies and each type of building.
You can verify the buildings with stored data, and the cookies with simple arithmetic.
Boom, cheating solved!</p>

<p>But not quite.
You&rsquo;ve just slowed botting down to human levels.
Like an MMORPG, it&rsquo;s possible to bot as long as you play by the rules.
From here, you&rsquo;d have to use browser fingerprinting, or other esoteric metrics to weed out bots.
Just remember, the stricter your anti-cheat protection is, the likely you are to anger your legitimate players!</p>

<h3>A few parting thoughts</h3>

<p>I love javascript clicking games.
They seem extremly simple, but can hide great ingenuity.
(Also, they ease my pain of not knowing flash).
But I feel you need to know what you&rsquo;re getting into when making one.
Unlike flash, or a desktop app, it&rsquo;s easy for the most basic of programmer to read your entire source code.
A little mucking around in dev tools and they can pry your game apart.
I find this a great thing, as it allows others to learn from what they find, but it can lead to the problems I mentioned above.
Again, just know the limitations of your platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[They say the first step is the hardest...]]></title>
    <link href="http://fugiman.github.io/blog/2013/08/10/they-say-the-first-step-is-the-hardest-dot-dot-dot/"/>
    <updated>2013-08-10T01:49:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/08/10/they-say-the-first-step-is-the-hardest-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a web developer for many years now, and during that time I&rsquo;ve never really had a site of my own.
It always struck me as odd that for someone whose daily routine consisted of making websites, I couldn&rsquo;t even make one for myself.
The sites I made were for a purpose &ndash; they provided a service or a piece of information &ndash; and I couldn&rsquo;t figure out what the purpose of a personal site would be.
Last year I made a single page site as a portfolio, and I was immediately disgusted with it.
I&rsquo;m a developer, not a designer.
The representation of myself as an artist instead of a problem solver just didn&rsquo;t feel right.
So I deleted it and returned to having nothing to say &ldquo;This is me&rdquo;.</p>

<p>Over the past year I&rsquo;ve more firmly integrated myself into the open source world.
I started heavily using github, and began to collaborate with others.
As a part of this process, I found many interesting programmers who were much smarter than me.
They all had one thing in common, they had a blog.
A few days ago, I found a blog post saying that &ldquo;comments are a facade fooling people into thinking they have a voice. They don&rsquo;t. You only have a voice if you have a blog.&rdquo;
While perhaps a bit extreme of a claim, it made me realize that comments are much like posting anonymously: It&rsquo;s very unlikely that people will use it to build an image of you.
Your comments are spread over many websites, sometimes with different usernames.
It&rsquo;s hard for people to build them into a complete picture of you, unless they are the NSA.
A blog, on the other hand, is a monolithic compendium of who you are.
If somebody reads your blog, they can build an image of the kind of person you are.
Perhaps a flawed and incomplete image, but an image nonetheless.</p>

<p>And there I had my answer.
A portfolio is silly, I can just link you to what I&rsquo;ve made.
After all, they are websites.
A blog is the way for me to actually share the struggles I have, what I learn from them, and hopefully I can teach you something as well.
And just maybe, it&rsquo;ll lead to me being a better programmer.
I look forward to seeing what comes of it.</p>
]]></content>
  </entry>
  
</feed>
