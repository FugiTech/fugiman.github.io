<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Fugiman]]></title>
  <link href="http://fugiman.github.io/blog/categories/blogging/atom.xml" rel="self"/>
  <link href="http://fugiman.github.io/"/>
  <updated>2013-09-21T21:04:14+00:00</updated>
  <id>http://fugiman.github.io/</id>
  <author>
    <name><![CDATA[Chris "Fugiman" Gamble]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatic Resume PDF Generation]]></title>
    <link href="http://fugiman.github.io/blog/2013/09/12/automatic-resume-pdf-generation/"/>
    <updated>2013-09-12T19:55:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/09/12/automatic-resume-pdf-generation</id>
    <content type="html"><![CDATA[<p>Earlier I posted about using Prose.IO and Travis-CI to allow posting on my blog from anywhere with little hassle. However, I also host my resume on this site and wanted to be able to easily update it as well. While I could edit it like any other post from Prose, I also wanted a PDF copy for companies seeking a downloadable version and for uploading to other sites.</p>

<p>The question became &ldquo;How do I automatically convert my markdown resume into a PDF?&rdquo; A few google searches later and I stumbled on <a href="https://github.com/alanshaw/markdown-pdf">Alan Shaw&rsquo;s Markdown-PDF package</a>. This package converts markdown to HTML, renders it with PhantomJS, then exports the rendered site to a PDF. Simple, a bit crude, but it works. To aide in making the documents look good, the package includes the base CSS of Twitter Bootstrap.</p>

<p>To make the generated resume look professional, I utilized some of the options Markdown-PDF provides. The first was using the &ldquo;Preprocess Markdown&rdquo; option to remove the YAML header and PDF download link from the file. Markdown-PDF doesn&rsquo;t understand the YAML header that Jekyll requires so I had to manually remove it, and there was no point to having a PDF download link in the PDF itself. Next, I processed the generated HTML to turn all links into plaintext. I found that they just made no sense if you couldn&rsquo;t click them, and they styling was distracting. Finally, I used the web font &ldquo;Oxygen&rdquo; to add some style.</p>

<p>Finally, getting Travis-CI to generate the PDF is rather simple. Every Travis-CI VM includes Node.JS by default, so I just had to add <code>npm install markdown-pdf</code> and <code>node generate_resume.js</code> to the before script instructions. My resume is generated and put in the proper place, and then Octopress deploys it as normal. Simple!</p>

<p><a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/generate_resume.js">generate_resume.js</a><br/>
<a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/pdf.css">pdf.css</a><br/>
<a href="https://github.com/Fugiman/fugiman.github.io/blob/d25eb2201d3f07e79a849f9ea6c6fedfcc6eef50/.travis.yml">.travis.yml</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Prose.IO to post from the cloud]]></title>
    <link href="http://fugiman.github.io/blog/2013/09/10/using-prose-io-to-post-from-the-cloud/"/>
    <updated>2013-09-10T12:35:00+00:00</updated>
    <id>http://fugiman.github.io/blog/2013/09/10/using-prose-io-to-post-from-the-cloud</id>
    <content type="html"><![CDATA[<p>When I first chose Octopress, I was delighted that I could quickly and easily create posts in markdown. I wanted to ensure that it would be as easy as possible to create content, so that I&rsquo;d have no reason not to post whatever I felt like. However, the biggest issue I had was that it required running jekyll locally to do so.</p>

<p>Today I decided to fix this stumbling block, and began to look for a frontend for Octopress. What I found instead was <a href="http://prose.io/">Prose.IO</a>. Prose isn&rsquo;t a frontend for Octopress, it is a way to edit any file in any of your github repositories easily. It just so happens that this is all it takes to allow me to create posts straight from my browser without any fussing with jekyll or git. I create a post on Prose.IO, which then commits to github, which is then processed by <a href="https://travis-ci.org/">Travis.CI</a>, which then commits back to github, which deploys the site. It all just works.</p>

<p>If this sounds like something you&rsquo;d want for yourself, you can checkout <a href="http://rogerz.github.io/blog/2013/02/21/prose-io-github-travis-ci/">this handy guide by Rogerz Zhang</a>. It got me squared away in about 20 minutes. Just note that the format of the Prose.IO configuration in <code>_config.yml</code> has changed. My settings look like the following:</p>

<p>```</p>

<h1>prose.io settings</h1>

<p>prose:
  rooturl: &ldquo;source&rdquo;
  metadata:</p>

<pre><code>source/_posts:
  - name: "layout"
    field:
      element: "hidden"
      value: "post"
  - name: "title"
    field:
      element: "text"
      label: "Title"
      value: "Post"
  - name: "categories"
    field:
      element: "text"
      label: "Categories"
      value: ""
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
